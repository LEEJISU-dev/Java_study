# 시작버튼-> 카운트다운하기

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class CountDown extends JFrame implements ActionListener{
	private JLabel label;
	private JButton button;
	private JPanel p;
	CountDown(){
		setTitle("count Down");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		label = new JLabel("start");
		button = new JButton("시작");
		button.addActionListener(this);
		p = new JPanel();
		p.add(label);
		p.add(button);
		label.setFont(new Font("serif", Font.BOLD, 100));
		add(p);
		
		setSize(250, 250);
		setVisible(true);
	}
	
	public static void main(String[] args) {
		CountDown t = new CountDown();

	}
	@Override
	public void actionPerformed(ActionEvent e){
			new MyThread1().start();
	}
	class MyThread1 extends Thread{
		public void run(){
			for(int i=10; i>=0; i--){
				try{
					Thread.sleep(1000);
				}catch(InterruptedException e){	}
				label.setText(i+ " ");
			}
		}
	}

}









#thread

class MyThread extends Thread{
	public void run(){
		for(int i=10; i>=0;i--){
			System.out.print("A"+i+" ");
		}
	}
	
}
public class Test1 {

	public static void main(String[] args) {
		MyThread t = new MyThread();
		MyThread t1 = new MyThread();
		//t.run();//메소드 호출
		
		//thread호출하면 두개가 동시에 돌아가서 순서가 매번 달라진다
		t.start();//run이라는 thread호출
		t1.start();
	}

}














#thread

class MyRunnable implements Runnable{
	String Name;
	public MyRunnable(String name){
		Name = name;
	}
	@Override
	public void run() {
		for(int i=10;i>=0;i--){
			System.out.print(Name+i+" ");
		}
		
	}
	
}
public class Test2 {

	public static void main(String[] args) {
		//MyRunnable t1 = new MyRunnable("A"); ->상속
		
		//인터페이스일 경우 thread 객체 생성해서 만들어야 함!!(인터페이스는 생성자를 만들 수 없기 때문)
		Thread t1 = new Thread(new MyRunnable("A"));
		Thread t2 = new Thread(new MyRunnable("B"));
		
		t1.start();
		t2.start();
		
	}

}

















#초세기
import java.awt.*;
import javax.swing.*;

class Timer implements Runnable{
	JLabel tlabel;
	
	public Timer(JLabel tlabel){
		this.tlabel = tlabel;
	}

	@Override
	public void run() {
		int n =0;
		while(true){
			tlabel.setText(Integer.toString(n));
			n++;
			try{
				Thread.sleep(1000);
			}catch(InterruptedException e){
				return;
			}
		}
		
	}
	
}
public class ThreadRunnable extends JFrame {
	public ThreadRunnable(){
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Container c = getContentPane();
		c.setLayout(new FlowLayout());
		
		JLabel tlabel =new JLabel();
		tlabel.setFont(new Font("Gothic", Font.ITALIC, 80));
		
		Timer runnable = new Timer(tlabel);
		Thread th= new Thread(runnable);
		c.add(tlabel);
		setSize(300, 150);
		setVisible(true);
		th.start();
	}

	public static void main(String[] args) {
		new ThreadRunnable();
	}

}









#깜빡깜빡하게 만들기
import javax.swing.*;
import java.awt.*;

class FlickeringLabel extends JLabel implements Runnable{
	
	public FlickeringLabel(String text) {
		super(text);
		setOpaque(true);
		
		Thread th = new Thread(this);
		th.start();
	}
	
	@Override
	public void run() {
		int n= 0;
		while(true){
			if(n==0){
				setBackground(Color.YELLOW);
				n=1;
			}else{
				setBackground(Color.PINK);
				n=0;
			}
			
			try{
				Thread.sleep(500);
			}catch(InterruptedException e){
				return;
			}
		}
		
	}
	
}
public class Flickering extends JFrame{
	public Flickering(){
		setTitle("Flickering");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Container c = getContentPane();
		c.setLayout(new FlowLayout());
		
		FlickeringLabel flabel = new FlickeringLabel("깜빡");
		
		JLabel label =new JLabel("안깜빡");
		FlickeringLabel flabel2 = new FlickeringLabel("여기도깜빡");
		c.add(flabel);
		c.add(label);
		c.add(flabel2);
		
		setSize(300, 150);
		setVisible(true);
		
	}
	public static void main(String[] args) {
		new Flickering();

	}

}





#thread 상속대신 rannable 구현
import java.awt.*;
import javax.swing.*;

class Timer implements Runnable{
	JLabel tlabel;
	
	public Timer(JLabel tlabel){
		this.tlabel = tlabel;
	}

	@Override
	public void run() {
		int n =0;
		while(true){
			tlabel.setText(Integer.toString(n));
			n++;
			try{
				Thread.sleep(1000);
			}catch(InterruptedException e){
				return;
			}
		}
		
	}
	
}
public class ThreadRunnable extends JFrame {
	public ThreadRunnable(){
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Container c = getContentPane();
		c.setLayout(new FlowLayout());
		
		JLabel tlabel =new JLabel();
		tlabel.setFont(new Font("Gothic", Font.ITALIC, 80));
		
		Timer runnable = new Timer(tlabel);
		Thread th= new Thread(runnable);
		c.add(tlabel);
		setSize(300, 150);
		setVisible(true);
		th.start();
	}

	public static void main(String[] args) {
		new ThreadRunnable();
	}

}











#메인의 thread값들

public class ThreadMain {

	public static void main(String[] args) {
		long id = Thread.currentThread().getId();
		String name = Thread.currentThread().getName();
		int priority = Thread.currentThread().getPriority();
		Thread.State s= Thread.currentThread().getState();
		
		System.out.println("name : "+name);//main
		System.out.println("id: "+id);//1
		System.out.println("priority: "+priority);//5(초기값)
		System.out.println("state: "+s);//runnable

	}

}









#카운트하다가 thread 강제종료하기-> 1. interrupt()

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
class TimerRunnable implements Runnable{
	JLabel tl;
	public TimerRunnable(JLabel tl){
		this.tl = tl;
	}
	@Override
	public void run() {
		int n=0;
		while(true){
			tl.setText(Integer.toString(n));
			n++;
			try{
				Thread.sleep(1000);
			}catch(InterruptedException e){
				return;
			}
		}
		
	}
	
}
public class ThreadInterrupt extends JFrame{
	Thread th;
	
	public ThreadInterrupt(){
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Container c = getContentPane();
		c.setLayout(new FlowLayout());
		
		JLabel tl = new JLabel();
		tl.setFont(new Font("Gothic", Font.ITALIC, 80));
		
		TimerRunnable runnable = new TimerRunnable(tl);
		th= new Thread(runnable);
		c.add(tl);
		
		JButton b = new JButton("kill");
		b.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				th.interrupt();
				JButton b = (JButton)e.getSource();
				b.setEnabled(false);
			}
		});
		c.add(b);
		setSize(300, 150);
		setVisible(true);
		
		th.start();
	}

	public static void main(String[] args) {
		new ThreadInterrupt();

	}

}







#카운트하다가 thread 강제종료하기->2.flag

->라벨 랜덤 위치, 색으로 출력하다가 마우스 클릭시 강제종료 


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
class RandomT extends Thread{
	Container c;
	boolean flag = false;
	
	public RandomT(Container c){
		this.c = c;
	}
	void finish(){
		flag=true;
	}
	public void run(){
		while(true){
			int x = ((int)(Math.random()*c.getWidth()));
			int y = ((int)(Math.random()*c.getHeight()));
			
			JLabel label = new JLabel("2018");
			label.setSize(80, 30);
			label.setLocation(x,y);
			label.setForeground(new Color(
					(int)(Math.random()*225.0),(int)(Math.random()*225.0),(int)(Math.random()*225.0)));
			c.add(label);
			c.repaint();
			try{
				Thread.sleep(300);
				if(flag==true){
					c.removeAll();
					label = new JLabel("finish");
					label.setSize(80, 30);
					label.setLocation(100,100);
					label.setForeground(Color.RED);
					c.add(label);
					c.repaint();
					return;
				}
			}catch(InterruptedException e){return;}
		}
	}
}
public class ThreadFlag extends JFrame{
	RandomT th;
	public ThreadFlag(){
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Container c = getContentPane();
		c.setLayout(null);
		
		c.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e){
				th.finish();
			}
		});
		setSize(300, 200);
		setVisible(true);
		th = new RandomT(c);
		th.start();
	}

	public static void main(String[] args) {
		new ThreadFlag();

	}

}


















